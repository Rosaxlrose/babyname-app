import { supabase } from '../supabaseClient';
import Swal from 'sweetalert2';

export const handleMissingParentName = async (missingParentName, missingNameValue) => {
    const result = await Swal.fire({
        title: `‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö${missingParentName}‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö`,
        text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏£‡∏≤‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
        cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
        customClass: {
            popup: 'glass-container',
            confirmButton: 'btn btn-primary',
            cancelButton: 'btn btn-secondary'
        }
    });

    if (!result.isConfirmed) {
        return null;
    }

    const { value: formValues } = await Swal.fire({
        title: 'üìù ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠',
        html: `
            <form id="addNameForm" class="space-y-4">
                <div class="space-y-2">
                    <label class="block text-sm font-medium text-gray-700">‡∏ä‡∏∑‡πà‡∏≠</label>
                    <input type="text" id="name" class="form-input w-full" value="${missingNameValue}" required>
                </div>
                <div class="space-y-2">
                    <label class="block text-sm font-medium text-gray-700">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢</label>
                    <textarea id="meaning" class="form-input w-full" rows="3" required></textarea>
                </div>
                <div class="space-y-2">
                    <label class="block text-sm font-medium text-gray-700">‡πÄ‡∏û‡∏®</label>
                    <select id="gender" class="form-input w-full" required>
                        <option value="‡∏ä‡∏≤‡∏¢">‡∏ä‡∏≤‡∏¢</option>
                        <option value="‡∏´‡∏ç‡∏¥‡∏á">‡∏´‡∏ç‡∏¥‡∏á</option>
                        <option value="‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á">‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á</option>
                    </select>
                </div>
                <div class="space-y-2">
                    <label class="block text-sm font-medium text-gray-700">‡πÅ‡∏ó‡πá‡∏Å (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ ,)</label>
                    <input type="text" id="tags" class="form-input w-full" placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏°‡∏á‡∏Ñ‡∏•, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" required>
                </div>
            </form>
        `,
        showCancelButton: true,
        confirmButtonText: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å',
        cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
        customClass: {
            popup: 'glass-container',
            confirmButton: 'btn btn-primary',
            cancelButton: 'btn btn-secondary'
        },
        preConfirm: () => {
            const form = document.getElementById('addNameForm');
            const name = document.getElementById('name').value;
            const meaning = document.getElementById('meaning').value;
            const gender = document.getElementById('gender').value;
            const tags = document.getElementById('tags').value;
            
            if (!name || !meaning || !gender || !tags) {
                Swal.showValidationMessage('‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
                return false;
            }
            
            return {
                name,
                meaning,
                gender,
                tags: tags.split(',').map(tag => tag.trim())
            };
        }
    });

    if (!formValues) {
        return null;
    }

    try {
        const { data, error } = await supabase
            .from('names')
            .insert([formValues]);

        if (error) throw error;

        await Swal.fire({
            title: '‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            text: '‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß',
            icon: 'success',
            confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á',
            customClass: {
                popup: 'glass-container',
                confirmButton: 'btn btn-primary'
            }
        });

        return formValues;
    } catch (error) {
        console.error('Error:', error);
        await Swal.fire({
            title: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
            text: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
            icon: 'error',
            confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á',
            customClass: {
                popup: 'glass-container',
                confirmButton: 'btn btn-primary'
            }
        });
        return null;
    }
};

export const validateParentNames = async (fatherName, motherName) => {
    let missingParentName = null;
    let missingNameValue = '';

    // Fetch parent data in parallel
    const [fatherData, motherData] = await Promise.all([
        fatherName ? supabase
            .from('names')
            .select('tags')
            .eq('name', fatherName)
            .single() : null,
        motherName ? supabase
            .from('names')
            .select('tags')
            .eq('name', motherName)
            .single() : null
    ]);

    if (fatherName && !fatherData?.data) {
        missingParentName = '‡∏ä‡∏∑‡πà‡∏≠‡∏û‡πà‡∏≠';
        missingNameValue = fatherName;
    }

    if (motherName && !motherData?.data) {
        missingParentName = missingParentName ? `${missingParentName}‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡πà` : '‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡πà';
        missingNameValue = motherName;
    }

    if (missingParentName) {
        const result = await handleMissingParentName(missingParentName, missingNameValue);
        if (result) {
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
            return validateParentNames(fatherName, motherName);
        }
        return null;
    }

    // Return parent tags
    const parentTags = new Map();
    if (fatherData?.data) {
        fatherData.data.tags.forEach(tag => parentTags.set(tag, true));
    }
    if (motherData?.data) {
        motherData.data.tags.forEach(tag => parentTags.set(tag, true));
    }

    return parentTags;
};
