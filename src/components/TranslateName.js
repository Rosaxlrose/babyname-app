import React, { useState, useEffect } from "react";
import { supabase } from "../supabaseClient";
import Swal from "sweetalert2";
import "./AINameAnalysis.css";

const TranslateName = () => {
  const [name, setName] = useState("");
  const [meaning, setMeaning] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [apiKey, setApiKey] = useState("");

  useEffect(() => {
    const getApiKey = async () => {
      try {
        const { data, error } = await supabase.rpc("get_secret", {
          secret_name: "OPENAI_API_KEY",
        });

        if (error) {
          console.error("Error fetching API key:", error);
          return;
        }

        if (data) {
          setApiKey(data);
        } else {
          console.error("No API key found");
        }
      } catch (error) {
        console.error("Error in getApiKey:", error);
      }
    };

    getApiKey();
  }, []);

  const parseAIResponse = (response) => {
    try {
      const meaningMatch = response.match(/‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢:?\s*(.+?)(?=\n|‡πÅ‡∏ó‡πá‡∏Å|‡πÄ‡∏û‡∏®|$)/i);
      const tagsMatch = response.match(/‡πÅ‡∏ó‡πá‡∏Å:?\s*(.+?)(?=\n|‡πÄ‡∏û‡∏®|$)/i);
      const genderMatch = response.match(/‡πÄ‡∏û‡∏®:?\s*(.+?)(?=\n|$)/i);

      let gender = "‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á";
      if (genderMatch) {
        const genderText = genderMatch[1].trim().toLowerCase();
        if (genderText.includes("‡∏ä‡∏≤‡∏¢") && !genderText.includes("‡∏´‡∏ç‡∏¥‡∏á")) {
          gender = "‡∏ä‡∏≤‡∏¢";
        } else if (genderText.includes("‡∏´‡∏ç‡∏¥‡∏á") && !genderText.includes("‡∏ä‡∏≤‡∏¢")) {
          gender = "‡∏´‡∏ç‡∏¥‡∏á";
        }
      }

      return {
        meaning: meaningMatch ? meaningMatch[1].trim() : response,
        tags: tagsMatch
          ? tagsMatch[1]
              .split(/[,ÿå]/)
              .map((tag) => tag.trim())
              .filter((tag) => tag)
          : [],
        gender,
      };
    } catch (error) {
      console.error("Error parsing AI response:", error);
      return {
        meaning: response,
        tags: [],
        gender: "‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á",
      };
    }
  };

  const handleTranslate = async () => {
    if (!name) {
      Swal.fire("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠");
      return;
    }

    setIsLoading(true);

    try {
      // Check if the name exists in the database
      const { data: existingName, error: fetchError } = await supabase
        .from("names")
        .select("meaning")
        .eq("name", name)
        .single();

      if (fetchError) throw fetchError;

      if (existingName) {
        setMeaning(existingName.meaning);
        Swal.fire("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", `‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢: ${existingName.meaning}`, "info");
      } else {
        if (!apiKey) {
          Swal.fire(
            "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
            "‡πÑ‡∏°‡πà‡∏û‡∏ö API key ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OPENAI_API_KEY ‡πÉ‡∏ô Supabase secrets",
            "error"
          );
          return;
        }

        // Fetch meaning from AI
        const response = await fetch("https://api.openai.com/v1/chat/completions", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${apiKey}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            model: "gpt-3.5-turbo",
            messages: [
              {
                role: "user",
                content: `‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:
                ‡∏ä‡∏∑‡πà‡∏≠: "${name}"
                ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:
                ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢: [‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠]
                ‡πÅ‡∏ó‡πá‡∏Å: [‡πÅ‡∏ó‡πá‡∏Å1], [‡πÅ‡∏ó‡πá‡∏Å2], [‡πÅ‡∏ó‡πá‡∏Å3]
                ‡πÄ‡∏û‡∏®: [‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏ä‡∏≤‡∏¢" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏´‡∏ç‡∏¥‡∏á" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á" ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô]`,
              },
            ],
            max_tokens: 200,
            temperature: 0.7,
          }),
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error?.message || `HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        if (data.choices && data.choices[0]?.message?.content) {
          const aiResponse = data.choices[0].message.content.trim();
          const parsedResponse = parseAIResponse(aiResponse);

          setMeaning(parsedResponse.meaning);

          // Save to database
          const { error: dbError } = await supabase.from("names").insert({
            name,
            meaning: parsedResponse.meaning,
            tags: parsedResponse.tags,
            gender: parsedResponse.gender,
          });

          if (dbError) {
            console.error("Database Error:", dbError);
            throw new Error(dbError.message);
          }

          Swal.fire("‡πÅ‡∏õ‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", `‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢: ${parsedResponse.meaning}`, "success");
        } else {
          Swal.fire("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏î‡πâ", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•", "error");
        }
      }
    } catch (error) {
      console.error("Error:", error);
      Swal.fire("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ: ${error.message}`, "error");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="ai-name-analysis-container">
      <div className="glass-container max-w-full lg:max-w-4xl mx-auto w-[95%]">
        <h2 className="form-title">
          <span className="star">ü§ñ</span> ‡πÅ‡∏õ‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠
        </h2>
        <div className="space-y-6">
        <div className="flex justify-between">
  <label className="block text-sm font-medium text-gray-700">‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢</label>
  <label className="block text-sm font-medium text-gray-700 text-right">Powered by GPT-4o-mini</label>
</div>

          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•"
            className="form-input"
          />
          <button
            onClick={handleTranslate}
            disabled={isLoading}
            className="btn btn-primary"
          >
            {isLoading ? "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•..." : "üîç ‡πÅ‡∏õ‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢"}
          </button>
          {meaning && (
            <div className="mt-6">
              <h3 className="text-xl font-bold">‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</h3>
              <p>‡∏ä‡∏∑‡πà‡∏≠: {name}</p>
              <p>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢: {meaning}</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default TranslateName;
