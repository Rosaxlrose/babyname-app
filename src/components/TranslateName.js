import React, { useState, useEffect } from "react";
import { supabase } from "../supabaseClient";
import Swal from "sweetalert2";
import NameMeaningResult from "../components/NameMeaningResult";
import "./AINameAnalysis.css";

const TranslateName = () => {
  const [name, setName] = useState("");
  const [searchResult, setSearchResult] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [apiKey, setApiKey] = useState("");
  const [previousSearch, setPreviousSearch] = useState("");

  useEffect(() => {
    const container = document.querySelector('.translate-name-container');
    if (container) {
      for (let i = 0; i < 6; i++) {
        const bubble = document.createElement('div');
        bubble.className = 'floating-bubble';
        bubble.style.width = `${Math.random() * 100 + 50}px`;
        bubble.style.height = bubble.style.width;
        bubble.style.left = `${Math.random() * 100}%`;
        bubble.style.top = `${Math.random() * 100}%`;
        bubble.style.animationDelay = `${Math.random() * 5}s`;
        container.appendChild(bubble);
      }
    }

    const getApiKey = async () => {
      try {
        const { data, error } = await supabase.rpc("get_secret", {
          secret_name: "OPENAI_API_KEY",
        });

        if (error) {
          console.error("Error fetching API key:", error);
          Swal.fire("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á API key ‡πÑ‡∏î‡πâ", "error");
          return;
        }

        if (data) {
          setApiKey(data);
        } else {
          Swal.fire(
            "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
            "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OPENAI_API_KEY ‡πÉ‡∏ô Supabase secrets",
            "error"
          );
        }
      } catch (error) {
        console.error("Error in getApiKey:", error);
        Swal.fire("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á API key", "error");
      }
    };

    getApiKey();
  }, []);

  const parseAIResponse = (response) => {
    try {
      const meaningMatch = response.match(/‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢:?\s*(.+?)(?=\n|‡πÅ‡∏ó‡πá‡∏Å|‡πÄ‡∏û‡∏®|$)/i);
      const tagsMatch = response.match(/‡πÅ‡∏ó‡πá‡∏Å:?\s*(.+?)(?=\n|‡πÄ‡∏û‡∏®|$)/i);
      const genderMatch = response.match(/‡πÄ‡∏û‡∏®:?\s*(.+?)(?=\n|$)/i);

      let gender = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
      if (genderMatch) {
        const genderText = genderMatch[1].trim().toLowerCase();
        if (genderText.includes("‡∏ä‡∏≤‡∏¢") && !genderText.includes("‡∏´‡∏ç‡∏¥‡∏á") && !genderText.includes("‡∏ó‡∏±‡πâ‡∏á")) {
          gender = "‡∏ä‡∏≤‡∏¢";
        } else if (genderText.includes("‡∏´‡∏ç‡∏¥‡∏á") && !genderText.includes("‡∏ä‡∏≤‡∏¢") && !genderText.includes("‡∏ó‡∏±‡πâ‡∏á")) {
          gender = "‡∏´‡∏ç‡∏¥‡∏á";
        } else if (genderText.includes("‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á") || genderText.includes("‡∏ó‡∏±‡πâ‡∏á")) {
          gender = "‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á";
        }
      }

      let cleanedMeaning = meaningMatch ? meaningMatch[1].trim() : response;
      cleanedMeaning = cleanedMeaning
        .replace(/^["']|["']$/g, '')
        .replace(/‡∏ä‡∏∑‡πà‡∏≠\s*["']?[^"']+["']?\s*(?:‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤|‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á|‡∏Ñ‡∏∑‡∏≠)\s*/i, '')
        .replace(/^["']|["']$/g, '')
        .trim();

      return {
        meaning: cleanedMeaning,
        tags: tagsMatch
          ? tagsMatch[1]
              .split(/[,ÿå]/)
              .map((tag) => tag.trim())
              .filter((tag) => tag.length > 0)
          : [],
        gender,
      };
    } catch (error) {
      console.error("Error parsing AI response:", error);
      return {
        meaning: response,
        tags: [],
        gender: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
      };
    }
  };

  const handleTranslate = async () => {
    if (!name) {
      Swal.fire("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠");
      return;
    }

    if (!apiKey) {
      Swal.fire(
        "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OPENAI_API_KEY ‡πÉ‡∏ô Supabase secrets ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
        "error"
      );
      return;
    }

    if (name === previousSearch && searchResult) {
      // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏° ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏´‡∏°‡πà
      setSearchResult(null);
      setTimeout(() => setSearchResult(searchResult), 100);
      return;
    }

    setIsLoading(true);
    setPreviousSearch(name);

    try {
      const cachedResult = localStorage.getItem(`name-${name}`);
      if (cachedResult) {
        const parsedResult = JSON.parse(cachedResult);
        setSearchResult(null);
        setTimeout(() => setSearchResult({
          ...parsedResult,
          name: name 
        }), 100);
        setIsLoading(false);
        return;
      }

      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô
      const { data: existingName, error: fetchError } = await supabase
        .from("names")
        .select("name, meaning, gender, tags")
        .eq("name", name)
        .single();

      if (!fetchError && existingName) {
        const result = {
          name: name, 
          meaning: existingName.meaning,
          tags: existingName.tags || [],
          gender: existingName.gender || '',
        };
        localStorage.setItem(`name-${name}`, JSON.stringify(result));
        setSearchResult(null);
        setTimeout(() => setSearchResult(result), 100);
        setIsLoading(false);
        return;
      }

      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${apiKey}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "gpt-3.5-turbo",
          messages: [
            {
              role: "system",
              content: `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ 
              ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ô‡∏î‡πâ‡∏≤‡∏ô:
              1. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠ (‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏ä‡∏∑‡πà‡∏≠" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á") ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏û‡∏à‡∏ô‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏°‡πÑ‡∏ó‡∏¢‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
              1.1 ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ú‡∏™‡∏°‡∏î‡πâ‡∏ß‡∏¢ ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≥
              1.2 ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏°‡∏∏‡∏ó‡∏£ ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≥
              2. ‡πÅ‡∏ó‡πá‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠
              3. ‡πÄ‡∏û‡∏®‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏®‡πÉ‡∏î)
              
              ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô`
            },
            {
              role: "user",
              content: `‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ä‡∏∑‡πà‡∏≠: "${name}"
              
              ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:
              ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢: [‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏ä‡∏∑‡πà‡∏≠" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á"]
              ‡πÅ‡∏ó‡πá‡∏Å: [‡πÅ‡∏ó‡πá‡∏Å1], [‡πÅ‡∏ó‡πá‡∏Å2], [‡πÅ‡∏ó‡πá‡∏Å3]
              ‡πÄ‡∏û‡∏®: [‡∏ï‡∏≠‡∏ö‡πÄ‡∏û‡∏µ‡∏¢‡∏á "‡∏ä‡∏≤‡∏¢" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏´‡∏ç‡∏¥‡∏á" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÄ‡∏û‡∏®" ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô]`
            }
          ],
          temperature: 0.5,
          max_tokens: 200,
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      const aiResponse = data.choices[0]?.message?.content.trim();
      const parsedResponse = parseAIResponse(aiResponse);
      
      const result = {
        name,
        meaning: parsedResponse.meaning,
        tags: parsedResponse.tags,
        gender: parsedResponse.gender,
      };

      const { error: dbError } = await supabase.from("names").insert({
        ...result,
        created_at: new Date().toISOString(),
      });

      if (dbError) {
        console.error("Database Error:", dbError);
      }

      localStorage.setItem(`name-${name}`, JSON.stringify(result));
      setSearchResult(result);

    } catch (error) {
      console.error("Error:", error);
      Swal.fire(
        "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ: ${error.message}`,
        "error"
      );
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="translate-name-container relative min-h-screen">
      <div className="glass-container max-w-full lg:max-w-4xl mx-auto w-[95%] relative z-10">
        <h2 className="form-title">
          <span className="star">ü§ñ</span> ‡πÅ‡∏õ‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠
        </h2>
        <div className="space-y-6">
          <div className="flex justify-between">
            <label className="block text-sm font-medium text-gray-700">‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢</label>
            <label className="block text-sm font-medium text-gray-700 text-right">Powered by GPT-3.5</label>
          </div>
          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•"
            className="form-input"
          />
          <button
            onClick={handleTranslate}
            disabled={isLoading}
            className="btn btn-primary"
          >
            {isLoading ? "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•..." : "üîç ‡πÅ‡∏õ‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢"}
          </button>
          
          {searchResult && (
            <NameMeaningResult 
              name={searchResult.name}
              meaning={searchResult.meaning}
              tags={searchResult.tags}
              gender={searchResult.gender}
            />
          )}
        </div>
      </div>
    </div>
  );
};

export default TranslateName;